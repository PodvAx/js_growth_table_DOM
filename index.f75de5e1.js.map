{"mappings":"AAAA;AAEA,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB,MAAM,aAAa;AACnB,MAAM,gBAAgB;AACtB,MAAM,aAAa;AACnB,MAAM,gBAAgB;AAEtB,MAAM,YAAY,SAAS,aAAa,CAAC;AACzC,MAAM,YAAY,UAAU,aAAa,CAAC,UAAU,QAAQ,CAAC,EAAE;AAC/D,MAAM,eAAe,UAAU,aAAa,CAAC;AAC7C,MAAM,kBAAkB,UAAU,aAAa,CAAC;AAChD,MAAM,eAAe,UAAU,aAAa,CAAC;AAC7C,MAAM,kBAAkB,UAAU,aAAa,CAAC;AAEhD,SAAS;IACP,OAAO,SAAS,aAAa,CAAC;AAChC;AAEA,SAAS,UAAU,UAAU;IAC3B,MAAM,MAAM,SAAS,aAAa,CAAC;IAEnC,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAC9B,IAAI,WAAW,CAAC;IAGlB,OAAO;AACT;AAEA,SAAS,UAAU,eAAe;IAChC,MAAM,SAAS,UAAU;IAEzB,UAAU,WAAW,CAAC;IAEtB,OAAO,UAAU,QAAQ,CAAC,MAAM;AAClC;AAEA,SAAS,aAAa,IAAI;IACxB,KAAK,OAAO,CAAC,CAAC;QACZ,IAAI,WAAW,CAAC;IAClB;IAEA,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM;AAChC;AAEA,SAAS,UAAU,IAAI,EAAE,eAAe;IACtC,UAAU,WAAW,CAAC,IAAI,CAAC,kBAAkB,EAAE;IAE/C,OAAO,UAAU,QAAQ,CAAC,MAAM;AAClC;AAEA,SAAS,aAAa,IAAI;IACxB,KAAK,OAAO,CAAC,CAAC;QACZ,IAAI,WAAW,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE;IAC3D;IAEA,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM;AAChC;AAEA,SAAS,kBAAkB,MAAM,EAAE,SAAS;IAC1C,OAAO,QAAQ,GAAG;AACpB;AAEA,UAAU,gBAAgB,CAAC,SAAS,CAAC;IACnC,MAAM,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC;IAEhC,IAAI,CAAC,QACH;IAGF,MAAM,uBAAuB,OAAO,SAAS,CAC1C,KAAK,CAAC,KACN,IAAI,CAAC,CAAC,YAAc,cAAc;IAErC,MAAM,OAAO,UAAU,gBAAgB,CAAC;IACxC,IAAI,kBAAkB,KAAK,MAAM;IACjC,IAAI,kBAAkB,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM;IAE7C,OAAQ;QACN,KAAK;YACH,IAAI,kBAAkB,WACpB,kBAAkB,UAAU;YAG9B,IAAI,mBAAmB,WACrB,kBAAkB,QAAQ;YAG5B,IAAI,aAAa,QAAQ,EACvB,kBAAkB,cAAc;YAGlC;QAEF,KAAK;YACH,IAAI,kBAAkB,WACpB,kBAAkB,aAAa;YAGjC,IAAI,mBAAmB,WACrB,kBAAkB,QAAQ;YAG5B,IAAI,gBAAgB,QAAQ,EAC1B,kBAAkB,iBAAiB;YAGrC;QAEF,KAAK;YACH,kBAAkB,UAAU,MAAM;YAElC,IAAI,mBAAmB,WACrB,kBAAkB,QAAQ;YAG5B,IAAI,aAAa,QAAQ,EACvB,kBAAkB,cAAc;YAGlC;QAEF,KAAK;YACH,kBAAkB,aAAa;YAE/B,IAAI,mBAAmB,WACrB,kBAAkB,QAAQ;YAG5B,IAAI,gBAAgB,QAAQ,EAC1B,kBAAkB,iBAAiB;YAGrC;QAEF;YACE;IACJ;AACF","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst MIN_COUNT = 2;\nconst MAX_COUNT = 10;\nconst APPEND_ROW = 'append-row';\nconst APPEND_COLUMN = 'append-column';\nconst REMOVE_ROW = 'remove-row';\nconst REMOVE_COLUMN = 'remove-column';\n\nconst container = document.querySelector('.container');\nconst tableBody = container.querySelector('.field').children[0];\nconst btnRemoveRow = container.querySelector('.remove-row');\nconst btnRemoveColumn = container.querySelector('.remove-column');\nconst btnAppendRow = container.querySelector('.append-row');\nconst btnAppendColumn = container.querySelector('.append-column');\n\nfunction createCell() {\n  return document.createElement('td');\n}\n\nfunction createRow(cellsCount) {\n  const row = document.createElement('tr');\n\n  for (let i = 0; i < cellsCount; i++) {\n    row.appendChild(createCell());\n  }\n\n  return row;\n}\n\nfunction appendRow(currentColCount) {\n  const newRow = createRow(currentColCount);\n\n  tableBody.appendChild(newRow);\n\n  return tableBody.children.length;\n}\n\nfunction appendColumn(rows) {\n  rows.forEach((row) => {\n    row.appendChild(createCell());\n  });\n\n  return rows[0].children.length;\n}\n\nfunction removeRow(rows, currentRowCount) {\n  tableBody.removeChild(rows[currentRowCount - 1]);\n\n  return tableBody.children.length;\n}\n\nfunction removeColumn(rows) {\n  rows.forEach((row) => {\n    row.removeChild(row.children[rows[0].children.length - 1]);\n  });\n\n  return rows[0].children.length;\n}\n\nfunction updateButtonState(button, condition) {\n  button.disabled = condition;\n}\n\ncontainer.addEventListener('click', (e) => {\n  const button = e.target.closest('.button');\n\n  if (!button) {\n    return;\n  }\n\n  const currentBtnActionName = button.className\n    .split(' ')\n    .find((className) => className !== 'button');\n\n  const rows = tableBody.querySelectorAll('tr');\n  let currentRowCount = rows.length;\n  let currentColCount = rows[0].children.length;\n\n  switch (currentBtnActionName) {\n    case APPEND_ROW:\n      if (currentRowCount < MAX_COUNT) {\n        currentRowCount = appendRow(currentColCount);\n      }\n\n      if (currentRowCount >= MAX_COUNT) {\n        updateButtonState(button, true);\n      }\n\n      if (btnRemoveRow.disabled) {\n        updateButtonState(btnRemoveRow, false);\n      }\n\n      break;\n\n    case APPEND_COLUMN:\n      if (currentColCount < MAX_COUNT) {\n        currentColCount = appendColumn(rows);\n      }\n\n      if (currentColCount >= MAX_COUNT) {\n        updateButtonState(button, true);\n      }\n\n      if (btnRemoveColumn.disabled) {\n        updateButtonState(btnRemoveColumn, false);\n      }\n\n      break;\n\n    case REMOVE_ROW:\n      currentRowCount = removeRow(rows, currentRowCount);\n\n      if (currentRowCount <= MIN_COUNT) {\n        updateButtonState(button, true);\n      }\n\n      if (btnAppendRow.disabled) {\n        updateButtonState(btnAppendRow, false);\n      }\n\n      break;\n\n    case REMOVE_COLUMN:\n      currentColCount = removeColumn(rows);\n\n      if (currentColCount <= MIN_COUNT) {\n        updateButtonState(button, true);\n      }\n\n      if (btnAppendColumn.disabled) {\n        updateButtonState(btnAppendColumn, false);\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}